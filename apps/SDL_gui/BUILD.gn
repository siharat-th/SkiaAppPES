# Copyright 2019 Google LLC
#
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

declare_args() {
  skia_enable_sdlgui = true
}

import("../../gn/skia.gni")

config("public_config") {
  if (skia_enable_sdlgui) {
    include_dirs = [ 
      "./src",
      "./src/ext",
    ]
  }
}

static_library("csvstream") {
  cflags = [
    "-std=c++11",
    "-pedantic",
    "-fexceptions",
    "-DNDEBUG",
  ]

  sources = [
    "libs/csvstream/csvstream.h",
    "libs/csvstream/csvstream.cpp",
  ]
  
  if( is_win ) {
    if(!defined(cflags)) {
      cflags = []
    }

    if(!defined(defines)) {
      defines = []
    }

    #MSVC builds
    if(is_win && !is_clang) {
      result_filtered = filter_include(cflags, [ "-std=c++11", "-pedantic", "-fexceptions", ])
      cflags -= result_filtered
      
      cflags += [ "/std:c++17", "/EHa", ]
    }
    
    defines += [ "NDEBUG" ]
  }  
}

static_library("inih") {

  sources = [
    "libs/inih/ini.h",
    "libs/inih/ini.c",
  ]
}

# shared_library("utf8cpp") {
#     include_dirs = [
#       "libs/utf8cpp/include",
#       "libs/utf8cpp/include/utf8",
#     ]
# }

static_library("tess2"){
  include_dirs = [
    "libs/tess2/include",
  ]

  sources = [
    "libs/tess2/include/tesselator.h",
    "libs/tess2/Source/bucketalloc.h",
    "libs/tess2/Source/dict.h",
    "libs/tess2/Source/geom.h",
    "libs/tess2/Source/mesh.h",
    "libs/tess2/Source/priorityq.h",
    "libs/tess2/Source/sweep.h",
    "libs/tess2/Source/tess.h",
    "libs/tess2/Source/bucketalloc.c",
    "libs/tess2/Source/dict.c",
    "libs/tess2/Source/geom.c",
    "libs/tess2/Source/mesh.c",
    "libs/tess2/Source/priorityq.c",
    "libs/tess2/Source/sweep.c",
    "libs/tess2/Source/tess.c",
  ]
}

static_library("pugixml"){
  cflags = [
    "-Wno-return-type",
  ]

  sources = [
    "libs/pugixml/pugiconfig.hpp",
    "libs/pugixml/pugixml.hpp",
    "libs/pugixml/pugixml.cpp",
  ]
  
  if( is_win ) {
    if(!defined(cflags)) {
      cflags = []
    }

    if(!defined(defines)) {
      defines = []
    }

    #MSVC builds
    if(is_win && !is_clang) {
      result_filtered = filter_include(cflags, [ "-Wno-return-type" ])
      cflags -= result_filtered
    }

    defines += [ "PUGIXML_NO_EXCEPTIONS" ]
  }  
}

static_library("minizip"){
  cflags = ["-Wno-extra-tokens", "-Wno-incompatible-pointer-types-discards-qualifiers"]

  include_dirs = [
    "libs/minizip",
    #"//third_party/externals/zlib",
  ]

  sources = [
    # "libs/minizip/crypt.h",
    "libs/minizip/ioapi.h",
    # "libs/minizip/mztools.h",
    "libs/minizip/unzip.h",
    # "libs/minizip/zip.h",
    "libs/minizip/ioapi.c",
    # "libs/minizip/miniunz.c",
    # "libs/minizip/minizip.c",
    # "libs/minizip/mztools.c",
    "libs/minizip/unzip.c",
    # "libs/minizip/zip.c",
    "//third_party/externals/zlib.h",
  ]

  if (is_win){
    sources += [
      "libs/minizip/iowin32.h",
      "libs/minizip/iowin32.c",
    ]
  }

  deps = [
    "//third_party/zlib",
  ]

  if( is_win ) {
    if(!defined(cflags)) {
      cflags = []
    }

    if(!defined(defines)) {
      defines = []
    }

    #MSVC builds
    if(is_win && !is_clang) {
      result_filtered = filter_include(cflags, [ "-Wno-return-type", "-Wno-extra-tokens", "-Wno-incompatible-pointer-types-discards-qualifiers"])
      cflags -= result_filtered
    }

    #defines += [ "DEBUG" ]
  }
}

static_library("SQLiteCpp"){
  include_dirs = [
    "libs/SQLiteCpp/include",
    "libs/SQLiteCpp/sqlite3",
    "libs/SQLiteCpp/include/SQLiteCpp",
  ]

  cflags = [
    "-Wno-return-type",
  ]

  sources = [
    "libs/SQLiteCpp/sqlite3/sqlite3.h",
    "libs/SQLiteCpp/sqlite3/sqlite3.c",
    "libs/SQLiteCpp/include/SQLiteCpp/Backup.h",
    "libs/SQLiteCpp/include/SQLiteCpp/Column.h",
    "libs/SQLiteCpp/include/SQLiteCpp/Database.h",
    "libs/SQLiteCpp/include/SQLiteCpp/Exception.h",
    "libs/SQLiteCpp/include/SQLiteCpp/Statement.h",
    "libs/SQLiteCpp/include/SQLiteCpp/Transaction.h",
    "libs/SQLiteCpp/src/Backup.cpp",
    "libs/SQLiteCpp/src/Column.cpp",
    "libs/SQLiteCpp/src/Database.cpp",
    "libs/SQLiteCpp/src/Exception.cpp",
    "libs/SQLiteCpp/src/Statement.cpp",
    "libs/SQLiteCpp/src/Transaction.cpp",
  ]

  if( is_win ) {
    if(!defined(cflags)) {
      cflags = []
    }

    if(!defined(defines)) {
      defines = []
    }

    #MSVC builds
    if(is_win && !is_clang) {
      result_filtered = filter_include(cflags, [ "-Wno-return-type" ])
      cflags -= result_filtered
    }

    #defines += [ "DEBUG" ]
  }
}

static_library("clipper"){
  include_dirs = [
    "libs/ofxClipper/clipper/src/cpp",
  ]

  cflags = [
    "-Wno-return-type",
  ]

  sources = [
    "libs/ofxClipper/clipper/src/cpp/clipper.hpp",
    "libs/ofxClipper/clipper/src/cpp/clipper.cpp",
  ]

  if( is_win ) {
    if(!defined(cflags)) {
      cflags = []
    }

    if(!defined(defines)) {
      defines = []
    }

    #MSVC builds
    if(is_win && !is_clang) {
      result_filtered = filter_include(cflags, [ "-Wno-return-type" ])
      cflags -= result_filtered
    }

    #defines += [ "DEBUG" ]
  }
}

static_library("potrace1"){
  include_dirs = [
    "libs/potrace/include",
    "libs/potrace/src",
  ]

  sources = [
    "libs/potrace/include/config.h",
    "libs/potrace/include/potracelib.h",
    # "libs/potrace/src/backend_dxf.c",
    # "libs/potrace/src/backend_eps.c",
    # "libs/potrace/src/backend_geojson.c",
    # "libs/potrace/src/backend_pdf.c",
    # "libs/potrace/src/backend_pgm.c",
    # "libs/potrace/src/backend_svg.c",
    # "libs/potrace/src/backend_xfig.c",
    "libs/potrace/src/bbox.c",
    "libs/potrace/src/bitmap_io.c",
    "libs/potrace/src/curve.c",
    "libs/potrace/src/decompose.c",
    "libs/potrace/src/flate.c",
    "libs/potrace/src/greymap.c",
    "libs/potrace/src/lzw.c",
    "libs/potrace/src/potracelib.c",
    "libs/potrace/src/progress_bar.c",
    "libs/potrace/src/render.c",
    "libs/potrace/src/trace.c",
    "libs/potrace/src/trans.c",
  ]
  
  if (is_win) {
    defines = [ "_USE_MATH_DEFINES" ]
    #defines += [ "DEBUG" ]
  }
}

static_library("sdl_ttf"){
  deps = [
    "//third_party/libsdl",
    "//third_party/harfbuzz",
  ]
  
  if( !is_win ) {
    deps += [
      "//third_party/freetype2",
    ]
  }  

  include_dirs = [
    "libs/sdl_ttf",
    "//third_party/externals/freetype/include"
  ]
  
  sources = [
    "libs/sdl_ttf/SDL_ttf.h",
    "libs/sdl_ttf/SDL_ttf.cpp",
  ]
}

static_library("sdl_image"){
  deps = [
    "//third_party/libsdl",
    "//third_party/libjpeg-turbo:libjpeg",
    "//third_party/libpng",
    "//third_party/libwebp",
    "//third_party/zlib",
  ]

  include_dirs = [
    "libs/sdl_image",
  ]
  
  sources = [
    "libs/sdl_image/miniz.h",
    "libs/sdl_image/nanosvg.h",
    "libs/sdl_image/nanosvgrast.h",
    "libs/sdl_image/SDL_image.h",
    "libs/sdl_image/IMG_bmp.c",
    "libs/sdl_image/IMG_gif.c",
    "libs/sdl_image/IMG_jpg.c",
    "libs/sdl_image/IMG_lbm.c",
    "libs/sdl_image/IMG_pcx.c",
    "libs/sdl_image/IMG_png.c",
    "libs/sdl_image/IMG_pnm.c",
    "libs/sdl_image/IMG_svg.c",
    "libs/sdl_image/IMG_tga.c",
    "libs/sdl_image/IMG_tif.c",
    "libs/sdl_image/IMG_webp.c",
    "libs/sdl_image/IMG_WIC.c",
    "libs/sdl_image/IMG_xcf.c",
    "libs/sdl_image/IMG_xpm.c",
    "libs/sdl_image/IMG_xv.c",
    "libs/sdl_image/IMG_xxx.c",
    "libs/sdl_image/IMG.c",
    # "libs/sdl_image/IMG_ImageIO.m",
    # "libs/sdl_image/IMG_UIImage.m",
  ]

  if( is_mac ) {
    frameworks = [ "Foundation.framework" ]
    sources += [
      "libs/sdl_image/IMG_ImageIO.m"
    ]
  }
  
  if(is_win || is_linux || is_wasm) {
    defines = [
      "LOAD_BMP",
      "LOAD_GIF",
      "LOAD_JPG",
      #"LOAD_JPG_DYNAMIC=libjpeg-9.dll",
      "LOAD_LBM",
      "LOAD_PCX",
      "LOAD_PNG",
      #"LOAD_PNG_DYNAMIC=libpng16-16.dll",
      "LOAD_PNM",
      #"NANOSVG_IMPLEMENTATION",
      #"NANOSVGRAST_IMPLEMENTATION",
      "LOAD_SVG",
      #"LOAD_SVG",
      #"LOAD_TGA",
      #"LOAD_TIF",
      #"LOAD_TIF_DYNAMIC=libtiff-5.dll",
      "LOAD_WEBP",
      #"LOAD_WEBP_DYNAMIC=libwebp-7.dll",
      "LOAD_XPM",
      "LOAD_XV",
      #"PNG_USE_DLL",
      #"ZLIB_DLL",
    ]
  }  
}

static_library("sdl_gfx"){
  deps = [
    "//third_party/libsdl",
  ]

  include_dirs = [
    "libs/sdl_gfx",
  ]
  
  sources = [
    "libs/sdl_gfx/SDL2_framerate.c",
    "libs/sdl_gfx/SDL2_gfxPrimitives.c",
    "libs/sdl_gfx/SDL2_imageFilter.c",
    "libs/sdl_gfx/SDL2_rotozoom.c",
  ]
}

static_library("sdl_net"){
  deps = [
    "//third_party/libsdl",
  ]

  include_dirs = [
    "libs/sdl_net",
  ]
  
  sources = [
    "libs/sdl_net/SDLnet.c",
    "libs/sdl_net/SDLnetselect.c",
    "libs/sdl_net/SDLnetTCP.c",
    "libs/sdl_net/SDLnetUDP.c",
  ]
  
  if (is_win) {
    defines = [ "__WIN32__", "__USE_W32_SOCKETS" ]
    cflags = [ "-DWIN32" ]
    libs = [
      "setupapi.lib",
      "advapi32.lib",
      "ws2_32.lib",
      "mswsock.lib",
      "iphlpapi.lib",
    ]
    sources += [
      #"libs/sdl_net/version.rc",
    ]
  }
}

static_library("SDL_gui") {
  if (skia_enable_sdlgui) {
    public_configs = [ ":public_config" ]
    include_dirs = [ 
      "./src",
      "./src/ext",
      # "libs/ofxClipper/ofxClipper/include",
      # "libs/ofxClipper/ofxClipper/include/ofx",
      "libs/sdl_ttf",
      "libs/sdl_image",
      "libs/utf8cpp/include",
      "libs/utf8cpp/include/utf8",
      "libs/tess2/include",
      "libs/sdl_gfx",
      "libs/sdl_net",
      "//third_party/externals/freetype/include",
      "modules/skutil/include"
    ]

    cflags = [
      "-Wno-return-type",
    ]

    if (is_win) {
      cflags += [ "-DWIN32" ]
      libs = [ 
        "setupapi.lib",
        "advapi32.lib",
        "ws2_32.lib",
        "mswsock.lib",
      ]       
    }
    deps = [
      "../..:skia",
      "//third_party/libsdl",
      ":sdl_ttf",
      ":sdl_image",
      ":sdl_gfx",
      ":sdl_net",
      ":tess2",
      "//third_party/harfbuzz",
      "//third_party/freetype2",
    ]
    sources = [
      "src/ext/guiButton.cpp",
      "src/ext/guiDigit.cpp",
      "src/ext/guiEvents.cpp",
      "src/ext/guiFolder.cpp",
      "src/ext/guiGroup.cpp",
      "src/ext/guiScrollBar.cpp",
      "src/ext/guiSwitch.cpp",
      "src/ext/guiToolTips.cpp",

      "src/GUI_BalloonDialog.cpp",
      "src/GUI_Button.cpp",
      "src/GUI_ButtonFontAwesome.cpp",
      "src/GUI_ColorPicker.cpp",
      "src/GUI_Dialog.cpp",
      "src/GUI_Downloader.cpp",
      "src/GUI_Dropdown.cpp",
      "src/GUI_EditText.cpp",
      "src/GUI_FileDialog.cpp",
      # "src/GUI_FontAtlas.cpp",
      "src/GUI_Image.cpp",
      "src/GUI_Label.cpp",
      "src/GUI_List.cpp",
      "src/GUI_Log.cpp",
      "src/GUI_Math.cpp",
      # "src/GUI_MQTT.cpp",
      "src/GUI_Network.cpp",
      "src/GUI_Popup.cpp",
      # "src/GUI_Preference.cpp",
      "src/GUI_ScrollView.cpp",
      "src/GUI_Slider.cpp",
      "src/GUI_Switch.cpp",
      "src/GUI_SwitchFA.cpp",
      "src/GUI_Text.cpp",
      # "src/GUI_TextField.cpp",
      "src/GUI_ToolBar.cpp",
      # "src/GUI_UnicodeThai.cpp",
      # "src/GUI_UTF8.cpp",
      "src/GUI_Utils.cpp",
      "src/GUI_View.cpp",
      "src/guiMesh.cpp",
      "src/guiRectangle.cpp",
      "src/happyhttp.cpp",
      # "src/ini.cpp",
      # "src/ioapi.cpp",
      "src/jsFileUtils.cpp",
      # "src/json.cpp",
      "src/LocalizedString.cpp",
      "src/ofColor.cpp",
      "src/SDL_gui.cpp",
      "src/Shaper.cpp",
      # "src/unzip.cpp",
      # "src/GUI_IOS.mm",
    ]
    configs += [ "../../:skia_private" ]
    if (skia_enable_tools) {
      configs += [ "../../:our_vulkan_headers" ]
    }
  }

  if( is_wasm ) {
    if(!defined(cflags)) {
      cflags = []
    }
    
    if(!defined(defines)) {
      defines = []
    }
    
    cflags += [
      "-Wno-deprecated",
      "-Wno-deprecated-declarations",
      "-Wno-implicit-fallthrough",
      "-Wno-strict-aliasing",
      "-Wno-missing-field-initializers",
      "-Wno-format-zero-length",
      "-Wno-address-of-packed-member",
      "-Wno-int-to-void-pointer-cast",
    ]
    
    defines += [ 
      "EMSCRIPTEN=1", 
      "FORCE_SDLDRAW", 
      "EMTERPRETER_SYNC", 
    ]
  }

  if( is_win ) {
    if(!defined(cflags)) {
      cflags = []
    }

    if(!defined(defines)) {
      defines = []
    }

    #MSVC builds
    if(is_win && !is_clang) {
      result_filtered = filter_include(cflags, [ "-Wno-return-type" ])
      cflags -= result_filtered
      
      #msvc compile error C4716 must return a value
      cflags += [ "/wd4716", ]
    }
    else {
      cflags += [
        "-Wno-deprecated",
        "-Wno-deprecated-declarations",
        "-Wno-implicit-fallthrough",
        "-Wno-strict-aliasing",
        "-Wno-missing-field-initializers",
        "-Wno-format-zero-length",
        "-Wno-address-of-packed-member",
        "-Wno-int-to-void-pointer-cast",
      ]
    }

    #defines += [ "DEBUG" ]
  }
}
